#!/usr/bin/env python

import argparse
from itertools import islice

import h5py
import numpy as np

from deepseismic import velocity

GENERATORS = {"rt": velocity.RoethTarantolaGenerator}


def parse_args():
    parser = argparse.ArgumentParser(
        description="Simulate velocity distributions.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "-g",
        "--generator",
        default="rt",
        type=str,
        choices=GENERATORS.keys(),
        help="generative model",
        metavar="MODEL",
    )
    parser.add_argument(
        "-n", default=1, type=int, help="number of simulations", metavar="N"
    )
    parser.add_argument(
        "-nx",
        default=1000,
        type=int,
        help="number of grid points along the first dimension",
        metavar="N",
    )
    parser.add_argument(
        "-ny",
        default=1000,
        type=int,
        help="number of grid points along the second dimension",
        metavar="N",
    )
    parser.add_argument(
        "-nz",
        type=int,
        help="number of grid points along the third dimension",
        metavar="N",
    )
    parser.add_argument(
        "-o", "--output", type=str, required=True, help="output file"
    )
    parser.add_argument(
        "-s", "--seed", default=42, type=int, help="random seed"
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    shape = (args.nx, args.ny)
    if args.nz is not None:
        shape += (args.nz,)
    generator = GENERATORS[args.generator](shape, seed=args.seed)
    with h5py.File(args.output, "w") as f:
        for i, data in enumerate(islice(generator.generate_many(), args.n)):
            f.create_dataset(str(i), data=data, compression="gzip")
